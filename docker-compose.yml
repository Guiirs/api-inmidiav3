version: '3.8'
services:
  # Serviço da nossa API Node.js
  api:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development # Ou production, dependendo do que está a rodar
      - JWT_SECRET=${JWT_SECRET}
      # Aponta para o serviço mongo dentro da rede Docker
      - MONGODB_URI=mongodb://mongo:27017/inmidia_dev
      - R2_ENDPOINT=${R2_ENDPOINT}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_PUBLIC_URL=${R2_PUBLIC_URL}
      - PORT=3000
    depends_on:
      - mongo # Depende do serviço mongo
    volumes:
      - uploads_data:/usr/src/app/public/uploads
      # Para desenvolvimento, pode mapear o código local para dentro do container:
      # - .:/usr/src/app
      # - /usr/src/app/node_modules # Evita sobrescrever node_modules

  # Serviço MongoDB (substitui o 'db' PostgreSQL)
  mongo:
    image: mongo:latest # Ou uma versão específica, ex: mongo:6
    ports:
      # Expõe a porta do MongoDB para sua máquina host (opcional, mas útil para ferramentas de GUI)
      - "27017:27017"
    volumes:
      - mongo_data:/data/db # Persiste os dados do MongoDB
    # Sem necessidade de variáveis de ambiente para usuário/senha por padrão no Docker,
    # mas pode adicionar se quiser segurança extra no ambiente de dev/teste.

volumes:
  mongo_data: # Novo volume para MongoDB
  uploads_data: