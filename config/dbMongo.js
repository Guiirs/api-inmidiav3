// config/dbMongo.js
const mongoose = require('mongoose');
const fs = require('fs'); // Necess√°rio para SSL com CA
const path = require('path'); // Necess√°rio para SSL com CA
const config = require('./config'); // Puxa MONGODB_URI de config.js
const logger = require('./logger'); // Usa seu logger existente

// Caminho para o certificado CA (ajuste o nome do ficheiro se necess√°rio)
const caPath = path.resolve(__dirname, 'certs', 'ca-certificate.pem');

const connectDB = async () => {
  // <<< ADICIONAR ESTA VERIFICA√á√ÉO >>>
  if (process.env.NODE_ENV === 'test') {
    logger.info('[DB Mongo] Conex√£o adiada (ambiente de teste). Jest cuidar√° disso.');
    return; // N√£o conecta se for ambiente de teste
  }
  // <<< FIM DA ADI√á√ÉO >>>

  try {
    const options = {
      // Op√ß√µes Mongoose (geralmente n√£o s√£o mais necess√°rias nas vers√µes recentes)
    };

    // Adiciona op√ß√µes SSL apenas em produ√ß√£o (ou se DB_SSL=true)
    if (process.env.NODE_ENV === 'production' || process.env.DB_SSL === 'true') {
      if (fs.existsSync(caPath)) {
        options.tls = true;
        options.tlsCAFile = caPath;
        logger.info('üîê Usando certificado CA para conex√£o MongoDB SSL.');
      } else {
        logger.warn(`‚ö†Ô∏è Certificado CA SSL n√£o encontrado em ${caPath}. Conectando sem verifica√ß√£o (N√ÉO SEGURO PARA PRODU√á√ÉO REAL).`);
        // Fallback inseguro - EVITAR EM PRODU√á√ÉO REAL se poss√≠vel
        options.tls = true;
        options.tlsInsecure = true; // Equivalente a rejectUnauthorized: false
      }
    } else {
      logger.info('SSL para MongoDB desativado (ambiente n√£o-produ√ß√£o ou DB_SSL n√£o definido como true).');
    }

    // Tenta conectar usando a URI e as op√ß√µes
    await mongoose.connect(config.mongoUri, options);
    logger.info('üîå Conex√£o com MongoDB estabelecida.');

    // --- Adicionar esta configura√ß√£o global AP√ìS conectar ---
    mongoose.set('toJSON', {
        virtuals: true, // Inclui virtuais (campos calculados) se definidos no schema
        transform: (doc, ret) => {
            // 'ret' √© o objeto simples que ser√° enviado como JSON
            ret.id = ret._id; // Copia o valor de _id para um novo campo id
            delete ret._id;   // Remove o campo _id original
            delete ret.__v;   // Remove o campo de vers√£o __v do Mongoose
        }
    });

    mongoose.set('toObject', { // Opcional: Aplicar a mesma transforma√ß√£o para .toObject()
        virtuals: true,
        transform: (doc, ret) => {
            ret.id = ret._id;
            delete ret._id;
            delete ret.__v;
        }
    });
    logger.info('‚öôÔ∏è Mapeamento global Mongoose _id -> id configurado.');
    // ---------------------------------------------------------

  } catch (err) {
    // Loga o erro e encerra a aplica√ß√£o se a conex√£o inicial falhar
    logger.error('‚ùå Erro ao conectar com MongoDB:', err.message);
    process.exit(1); // Sai com c√≥digo de erro
  }
};

module.exports = connectDB; // Exporta a fun√ß√£o de conex√£o